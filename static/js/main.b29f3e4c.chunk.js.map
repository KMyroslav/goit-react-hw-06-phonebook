{"version":3,"sources":["redux/actions.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["actions","addContact","createAction","name","number","payload","deleteContact","setFilter","connect","state","filter","contacts","dispatch","filterInputId","shortid","generate","htmlFor","id","type","value","pattern","title","onChange","e","currentTarget","useState","setName","setNumber","nameInputId","useRef","numberInputId","onSubmit","preventDefault","required","items","contactId","obj","toLowerCase","includes","map","onClick","App","contactItemsReducer","createReducer","JSON","parse","localStorage","getItem","action","console","log","find","contact","alert","reduce","acc","el","push","filterReducer","contactsReducer","combineReducers","rootReducer","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistedReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"6PA+BeA,EAFC,CAAEC,WA3BCC,YAAa,sBAAsB,SAACC,EAAMC,GAC3D,MAAO,CACLC,QAAS,CACPF,OACAC,cAuBwBE,cAlBRJ,YAAa,yBAkBUK,UAT3BL,YAAa,uB,OCI/B,IAYeM,eAZS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,SAASD,WAIA,SAACE,GAC1B,MAAO,CACLL,UAAW,SAACG,GAAD,OAAYE,EAASZ,EAAQO,UAAUG,QAIvCF,EA/Bf,YAAwC,IAAtBE,EAAqB,EAArBA,OAAQH,EAAa,EAAbA,UAClBM,EAAgBC,IAAQC,WAE9B,OACE,gCACE,uBAAOC,QAASH,EAAhB,mCACA,uBACEI,GAAIJ,EACJK,KAAK,OACLf,KAAK,SACLgB,MAAOT,EACPU,QAAQ,yHACRC,MAAM,qcACNC,SAAU,SAACC,GAAD,OAAOhB,EAAUgB,EAAEC,cAAcL,gB,QCkCnD,IAMeX,eAAQ,iBAAO,MANH,SAACI,GAC1B,MAAO,CACLX,WAAY,SAACE,EAAMC,GAAP,OAAkBQ,EAASZ,EAAQC,WAAWE,EAAMC,QAIrDI,EApDf,YAAsC,IAAfP,EAAc,EAAdA,WACrB,EAAwBwB,mBAAS,IAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOrB,EAAP,KAAeuB,EAAf,KACMC,EAAcC,iBAAOf,IAAQC,YAC7Be,EAAgBD,iBAAOf,IAAQC,YASrC,OACE,uBAAMgB,SARa,SAACR,GACpBA,EAAES,iBACF/B,EAAWE,EAAMC,GACjBsB,EAAQ,IACRC,EAAU,KAIV,UACE,uBAAOX,QAASY,EAAhB,kBACA,uBACEX,GAAIW,EACJV,KAAK,OACLf,KAAK,OACLgB,MAAOhB,EACPiB,QAAQ,yHACRC,MAAM,qcACNY,UAAQ,EACRX,SAAU,SAACC,GACTG,EAAQH,EAAEC,cAAcL,UAG5B,uBAAOH,QAASc,EAAhB,oBACA,uBACEb,GAAIa,EACJZ,KAAK,MACLf,KAAK,SACLgB,MAAOf,EACPgB,QAAQ,yFACRC,MAAM,giBACNY,UAAQ,EACRX,SAAU,SAACC,GACTI,EAAUJ,EAAEC,cAAcL,UAG9B,wBAAQD,KAAK,SAAb,+BCpBN,IAceV,eAdS,SAACC,GACvB,MAAO,CACLE,SAAUF,EAAME,SAASuB,MACzBxB,OAAQD,EAAME,SAASD,WAIA,SAACE,GAC1B,MAAO,CACLN,cAAe,SAAC6B,GAAD,OAAevB,EAASZ,EAAQM,cAAc6B,KAC7D5B,UAAW,SAACG,GAAD,OAAYE,EAASZ,EAAQO,UAAUG,QAIvCF,EArCf,YAA2D,IAApCG,EAAmC,EAAnCA,SAAUD,EAAyB,EAAzBA,OAAQJ,EAAiB,EAAjBA,cACvC,OACE,8BACGK,EACED,QAAO,SAAC0B,GAAD,OAASA,EAAIjC,KAAKkC,cAAcC,SAAS5B,EAAO2B,kBACvDE,KAAI,SAAChB,GAAD,OACH,8BACGA,EAAEpB,KADL,KACaoB,EAAEnB,OACb,wBACEc,KAAK,SACL,UAASK,EAAEN,GACXuB,QAAS,WACPlC,EAAciB,EAAEN,KAJpB,sBAFMM,EAAEN,YCMLwB,I,EAAAA,EAZf,WACE,OACE,gCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,uBCPAC,EAAsBC,YAC1BC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,IADT,mBAGpC/C,EAAQC,YAAa,SAACQ,EAAOuC,GAE5B,OADAC,QAAQC,IAAIF,GACRvC,EAAM0C,MAAK,SAACC,GAAD,OAAaA,EAAQjD,OAAS6C,EAAO3C,QAAQF,SAC1DkD,MAAM,GAAD,OAAIL,EAAO3C,QAAQF,KAAnB,8BACEM,GAGH,GAAN,mBACKA,GADL,CAEE,CACEQ,GAAIH,IAAQC,WACZZ,KAAM6C,EAAO3C,QAAQF,KACrBC,OAAQ4C,EAAO3C,QAAQD,aAfQ,cAoBpCJ,EAAQM,eAAgB,SAACG,EAAOuC,GAC/B,OAAOvC,EAAM6C,QAAO,SAACC,EAAKC,GAIxB,OAHIA,EAAGvC,KAAO+B,EAAO3C,SACnBkD,EAAIE,KAAKD,GAEJD,IACN,OA1BgC,IA+BnCG,EAAgBf,YAAc,GAAD,eAChC3C,EAAQO,WAAY,SAACE,EAAOuC,GAAR,OAAmBA,EAAO3C,YAG3CsD,EAAkBC,YAAgB,CACtC1B,MAAOQ,EACPhC,OAAQgD,IAOKG,EAJKD,YAAgB,CAClCjD,SAAUgD,I,eC/BNG,EAAgB,CACpBC,IAAK,WACLC,Q,OAAAA,EACAC,UAAW,CAAC,WAGRC,EAAU,YACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAK1DC,EAAmBC,YAAef,EAAeD,GAE1CiB,EAAQC,YAAe,CAClCC,QAASJ,EACTV,eAGWe,EAAYC,YAAaJ,GC3BtCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,cAAD,CAAaQ,QAAQ,OAAOL,UAAWA,EAAvC,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,W","file":"static/js/main.b29f3e4c.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contact/addContact\", (name, number) => {\r\n  return {\r\n    payload: {\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction(\"contact/deleteContact\");\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: DELETE_CONTACT,\r\n//   payload: {\r\n//     contactId,\r\n//   },\r\n// });\r\n\r\nconst setFilter = createAction(\"contacts/setFilter\");\r\n\r\n// const setFilter = (filter) => ({\r\n//   type: SET_FILTER,\r\n//   payload: {\r\n//     filter,\r\n//   },\r\n// });\r\n\r\nconst actions = { addContact, deleteContact, setFilter };\r\n\r\nexport default actions;\r\n","import shortid from \"shortid\";\nimport propTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../redux/actions\";\n\nfunction Filter({ filter, setFilter }) {\n  const filterInputId = shortid.generate();\n\n  return (\n    <div>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\n        onChange={(e) => setFilter(e.currentTarget.value)}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    filter: state.contacts.filter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setFilter: (filter) => dispatch(actions.setFilter(filter)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  filter: propTypes.string,\n  setFilter: propTypes.func.isRequired,\n};\n","import { useState, useRef } from \"react\";\nimport shortid from \"shortid\";\nimport propTypes from \"prop-types\";\nimport actions from \"../../redux/actions\";\nimport { connect } from \"react-redux\";\n\nfunction ContactForm({ addContact }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const nameInputId = useRef(shortid.generate());\n  const numberInputId = useRef(shortid.generate());\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addContact(name, number);\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\n        required\n        onChange={(e) => {\n          setName(e.currentTarget.value);\n        }}\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={(e) => {\n          setNumber(e.currentTarget.value);\n        }}\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addContact: (name, number) => dispatch(actions.addContact(name, number)),\n  };\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  addContact: propTypes.func.isRequired,\n};\n","import propTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../redux/actions\";\n\nfunction ContactList({ contacts, filter, deleteContact }) {\n  return (\n    <div>\n      {contacts\n        .filter((obj) => obj.name.toLowerCase().includes(filter.toLowerCase()))\n        .map((e) => (\n          <p key={e.id}>\n            {e.name}: {e.number}\n            <button\n              type=\"button\"\n              data-id={e.id}\n              onClick={() => {\n                deleteContact(e.id);\n              }}\n            >\n              Delete\n            </button>\n          </p>\n        ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    contacts: state.contacts.items,\n    filter: state.contacts.filter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteContact: (contactId) => dispatch(actions.deleteContact(contactId)),\n    setFilter: (filter) => dispatch(actions.setFilter(filter)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: propTypes.array.isRequired,\n  filter: propTypes.string.isRequired,\n  deleteContact: propTypes.func.isRequired,\n};\n","import Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport actions from \"./actions\";\r\nimport shortid from \"shortid\";\r\n\r\nconst contactItemsReducer = createReducer(\r\n  JSON.parse(localStorage.getItem(\"contacts\")) || [],\r\n  {\r\n    [actions.addContact]: (state, action) => {\r\n      console.log(action);\r\n      if (state.find((contact) => contact.name === action.payload.name)) {\r\n        alert(`${action.payload.name} is alrteady in contacts.`);\r\n        return state;\r\n      }\r\n\r\n      return [\r\n        ...state,\r\n        {\r\n          id: shortid.generate(),\r\n          name: action.payload.name,\r\n          number: action.payload.number,\r\n        },\r\n      ];\r\n    },\r\n\r\n    [actions.deleteContact]: (state, action) => {\r\n      return state.reduce((acc, el) => {\r\n        if (el.id !== action.payload) {\r\n          acc.push(el);\r\n        }\r\n        return acc;\r\n      }, []);\r\n    },\r\n  }\r\n);\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.setFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: contactItemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./reducers\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store, persistor } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading=\"null\" persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}